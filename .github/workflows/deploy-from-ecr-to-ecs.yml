name: Deploy existing image to specific environment

on:
  workflow_call:
    inputs:
      application:
        description: 'Name of the application being built (example: cas)'
        required: true
        type: string
      image-tag:
        description: 'Image tag deployed (example: ga-956). You can use the output `build_id` from push-scan-java-ecr -workflow.'
        required: true
        type: string
      environment:
        description: 'Environment which to deploy to (hahtuva/untuva/pallero/sade)'
        required: true
        type: string
  workflow_dispatch: 
    inputs:
      application:
        description: 'Name of the application being built (example: cas)'
        required: true
        type: string
      image-tag:
        description: 'Image tag deployed (example: ga-956).'
        required: true
        type: string
      environment:
        description: 'Environment which to deploy to (hahtuva/untuva/pallero/sade)'
        required: true
        type: string
env:
  repo: '190073735177.dkr.ecr.eu-west-1.amazonaws.com/utility'
  

jobs:
  deploy:
    name: Deploy existing image from ECR to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        if: ${{ inputs.environment }} == 'hahtuva' || ${{ inputs.environment }} == 'untuva' || ${{ inputs.environment }} == 'pallero'
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          role-to-assume: ${{ secrets.AWS_OPINTOPOLKU_DEV_ROLE_ARN }}
          role-session-name: ${{ inputs.environment }}-${{ inputs.application }}-deploy
          aws-region: eu-west-1

      - name: Configure AWS credentials
        if: ${{ inputs.environment }} == 'sade'
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          role-to-assume: ${{ secrets.AWS_OPINTOPOLKU_PROD_ROLE_ARN }}
          role-session-name: ${{ inputs.environment }}-${{ inputs.application }}-deploy
          aws-region: eu-west-1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ inputs.environment }}-${{ inputs.application }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ inputs.application }}
          image: ${{ env.repo }}/${{ inputs.application }}:${{ inputs.image-tag }}

      - name: Query service and cluster from existing infrastructure
        if: ${{ inputs.environment }} == 'hahtuva'
        id: infra
        run: |
          service=$(aws ecs list-services --cluster ${{ secrets.AWS_OPINTOPOLKU_HAHTUVA_ECS_CLUSTER_NAME }} --query "serviceArns[?contains(@, '${{ inputs.application }}')] | [0]" | tr -d \" | sed 's/.*\///')
          echo "::set-output name=service::$service"
    
      - name: Deploy Amazon ECS task definition
        if: ${{ inputs.environment }} == 'hahtuva'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ steps.infra.outputs.service }}
          cluster: ${{ secrets.AWS_OPINTOPOLKU_HAHTUVA_ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
    
      - name: Login to utility
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
        with:
          role-to-assume: ${{ secrets.AWS_OPH_UTILITY_ROLE_ARN }}
          role-session-name: ${{ inputs.application }}-update-metadata
          aws-region: eu-west-1
      
      - name: Update deployment metadata
        run: |
          aws dynamodb put-item --table-name deployments --item "{\"EnvService\": {\"S\": \"${{ inputs.environment }}-${{ inputs.application }}\"}, \"Build\": {\"S\": \"ga-$GITHUB_RUN_NUMBER\"}, \"User\": {\"S\": \"$GITHUB_TRIGGERING_ACTOR\"}, \"Time\": {\"S\": \"$BUILD_TIMESTAMP\"}}" --region eu-west-1
          aws dynamodb put-item --table-name services --item "{\"EnvService\": {\"S\": \"${{ inputs.environment }}-${{ inputs.application }}\"}, \"LatestDeployedBuild\": {\"S\": \"ga-$GITHUB_RUN_NUMBER\"}}" --region eu-west-1

      # Scanning didn't work with cas, test the skip-dirs later
      # - name: Scan image
      #   id: scan
      #   uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d # master
      #   with:
      #     image-ref:  ${{ steps.ecr-login.outputs.registry }}/utility/${{ inputs.application }}:ga-${{ github.run_number }}
      #     format: 'sarif'
      #     skip-dirs: /proc,/bin,
      #     output: 'trivy-results.sarif'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'