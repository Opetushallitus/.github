name: Push java package

on:
  workflow_call:
    inputs:
      application:
        description: 'Name of the application being built (service name in AWS)'
        required: true
        type: string
      base-image:
        description: 'Image used as the base (example: utility/fatjar-openjdk11:master)'
        required: true
        type: string
      configfolder:
        description: 'Location of config which is copied to image'
        required: true
        type: string
      jarfile:
        description: 'Jarfile with dependencies, use * for changing elements (example: kouta-internal-*-with-dependencies.jar)'
        required: true
        type: string
      jarfolder:
        description: 'Folder which contains the jarfile mentioned above. Default: target'
        required: false
        default: 'target'
        type: string
      working-directory:
        description: 'Define starting directory for monorepos. Default: .'
        required: false
        type: string
        default: '.'
      type:
        description: 'Servicetype war/jar. Default: jar'
        required: false
        type: string
        default: jar
      download-artifact:
        description: 'Downloads the artifact instead of fetching it from cache, set download-artifact-name if you set this to true. Default: false'
        required: false
        type: boolean
        default: false
      download-artifact-name:
        description: 'Name of the artifact downloaded with download-artifact'
        required: false
        type: string
      native-libraries:
        description: 'Extract META-INF/native from jar file into java path. Default: false'
        required: false
        type: boolean
        default: false
        
    secrets:
      AWS_UTILITY_ROLE_ARN:
        required: true

env:
  DOCKER_BUILD_DIR: '/tmp/docker_build'

jobs:
  push:
    name: Push and scan java image
    runs-on: ubuntu-latest
    outputs:
      build_id: ${{ steps.output.outputs.build_id }}

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: actions/checkout@v4
          
      - uses: actions/cache/restore@v4
        if: ${{ inputs.download-artifact == false }}
        with:
          path: |
            ${{ inputs.jarfolder }}
          key: ${{ github.sha }}
          fail-on-cache-miss: true
      
      - uses: actions/download-artifact@v4
        if: ${{ inputs.download-artifact == true }}
        with:
          name: ${{ inputs.download-artifact-name }}

      - name: Check that there is a .jar file available in jarfolder
        run: |
          echo "core folder"
          ls -la
          echo "target folder"
          ls -la ${{ inputs.jarfolder }}
          count=$(find ${{ inputs.jarfolder }}/${{ inputs.jarfile }}*.${{ inputs.type }} -type f | wc -l)
          if [ $count -eq 0 ]
          then
            exit 1
          else
            count2=$(find ${{ inputs.jarfolder }}/${{ inputs.jarfile }}.${{ inputs.type }} -type f | wc -l)
            if [ $count2 -eq 0 ]
            then
              mv ${{ inputs.jarfolder }}/${{ inputs.jarfile }}-*.${{ inputs.type }} ${{ inputs.jarfolder }}/${{ inputs.jarfile }}.${{ inputs.type }}
            fi
            exit 0
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3
        with:
          platforms: arm64,amd64

      - name: Setup buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3
        id: buildx

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_UTILITY_ROLE_ARN }}
          role-session-name: ${{ inputs.application }}-push-image
          aws-region: eu-west-1

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2

      - name: Login to docker with ECR
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          registry: ${{ steps.ecr-login.outputs.registry }}

      - name: Prepare for jar build
        shell: bash
        env:
          ECR_REPO: ${{ steps.ecr-login.outputs.registry }}
        run: |
          echo "artifact_destination=/usr/local/bin" >> "$GITHUB_ENV"
          mkdir -p $DOCKER_BUILD_DIR && mkdir $DOCKER_BUILD_DIR/config && mkdir $DOCKER_BUILD_DIR/artifact
          curl -LJO --output-dir $DOCKER_BUILD_DIR https://raw.githubusercontent.com/Opetushallitus/ci-tools/master/github-build/Dockerfile
          cp -v ${{ inputs.jarfolder }}/${{ inputs.jarfile }}.${{ inputs.type }} $DOCKER_BUILD_DIR/artifact/${{ inputs.application }}.${{ inputs.type }}
          cp -vr ${{ inputs.configfolder }} $DOCKER_BUILD_DIR/config/
          sed -i -e "s|BASEIMAGE|${ECR_REPO}/utility/${{ inputs.base-image }}|g" ${DOCKER_BUILD_DIR}/Dockerfile
          if [ ${{ inputs.native-libraries }} = true ]
          then 
            jar xf ${{ inputs.jarfolder }}/${{ inputs.jarfile }}.${{ inputs.type }} META-INF/native
            mv META-INF/native $DOCKER_BUILD_DIR/native_libs
            sed -i '/^CMD.*/i COPY native_libs/* /usr/lib' ${DOCKER_BUILD_DIR}/Dockerfile
          fi

      - name: Prepare for war build
        if: ${{ inputs.type == 'war' }}
        shell: bash
        run: |
          echo "artifact_destination=/opt/tomcat/webapps/" >> "$GITHUB_ENV"
          if [ "$(ls -A $DOCKER_BUILD_DIR/artifact/*.war)" ]; then 
            for artifact in $DOCKER_BUILD_DIR/artifact/*.war; do 
              unzip -qd "$DOCKER_BUILD_DIR/artifact/$(basename $artifact .war)" $artifact
              rm -f $artifact
            done
          fi

      - name: Docker meta for image
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ steps.ecr-login.outputs.registry }}/utility/${{ inputs.application }}
          tags: |
            type=raw,value=ga-${{ github.run_number }}
            type=raw,value=${{ github.ref_name }}

      - name: Build image
        id: build-push
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ${{ env.DOCKER_BUILD_DIR }}
          push: true
          platforms: linux/amd64, linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            name=${{ inputs.application }}
            artifact_destination=${{ env.artifact_destination }}

      - name: Update build metadata
        shell: bash
        id: output
        run: |
          BUILD_TIMESTAMP=`TZ='Europe/Helsinki' date +'%Y-%m-%d %H:%M:%S %Z'`
          aws dynamodb put-item --table-name builds --item "{\"Service\": {\"S\": \"${{ inputs.application }}\"}, \"Build\": {\"S\": \"ga-$GITHUB_RUN_NUMBER\"}, \"Branch\": {\"S\": \"$GITHUB_REF_NAME\"}, \"Commit\": {\"S\": \"$GITHUB_SHA\"}, \"Time\": {\"S\": \"$BUILD_TIMESTAMP\"}}" --condition-expression "attribute_not_exists(Id)" --region eu-west-1
          echo "build_id=ga-$GITHUB_RUN_NUMBER" >> $GITHUB_OUTPUT

      # Scanning didn't work with cas, test the skip-dirs later
      # - name: Scan image
      #   id: scan
      #   uses: aquasecurity/trivy-action@062f2592684a31eb3aa050cc61e7ca1451cecd3d # master
      #   with:
      #     image-ref:  ${{ steps.ecr-login.outputs.registry }}/utility/${{ inputs.application }}:ga-${{ github.run_number }}
      #     format: 'sarif'
      #     skip-dirs: /proc,/bin,
      #     output: 'trivy-results.sarif'

      # - name: Upload Trivy scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: 'trivy-results.sarif'